{"version":3,"sources":["../src/BaseTable.js"],"names":["getColumns","columns","children","getContainerStyle","width","maxWidth","height","overflow","DEFAULT_COMPONENTS","TableCell","TableHeaderCell","ExpandIcon","SortIndicator","RESIZE_THROTTLE_WAIT","EMPTY_ARRAY","BaseTable","props","defaultExpandedRowKeys","state","scrollbarSize","hoveredRowKey","resizingKey","resizingWidth","expandedRowKeys","columnManager","ColumnManager","fixed","_setContainerRef","bind","_setMainTableRef","_setLeftTableRef","_setRightTableRef","renderExpandIcon","renderRow","renderRowCell","renderHeader","renderHeaderCell","_handleScroll","_handleVerticalScroll","_handleRowsRendered","_handleRowHover","_handleRowExpand","_handleColumnResize","_handleColumnResizeStart","_handleColumnResizeStop","_handleColumnSort","_handleFrozenRowHeightChange","_handleRowHeightChange","_getLeftTableContainerStyle","_getRightTableContainerStyle","_flattenOnKeys","tree","keys","dataKey","_depthMap","_resetColumnManager","reset","estimatedRowHeight","hasLeftFrozenColumns","_leftRowHeightMap","hasRightFrozenColumns","_rightRowHeightMap","isObjectEqual","_isResetting","_resetIndex","_rowHeightMap","_rowHeightMapBuffer","_mainRowHeightMap","_getRowHeight","_updateRowHeights","resetAfterRowIndex","forceUpdateTable","forceUpdate","_scroll","scrollLeft","scrollTop","_scrollHeight","_lastScannedRowIndex","_hasDataChangedSinceEndReached","_data","data","_horizontalScrollbarSize","_verticalScrollbarSize","_scrollbarPresenceChanged","tableNode","undefined","expandedData","getExpandedRowKeys","expandedDepthMap","rowHeight","totalRowsHeight","table","getTotalRowsHeight","length","getColumnsWidth","leftTable","rightTable","rowIndex","shouldForceUpdate","offset","scrollToPosition","scrollToTop","align","scrollToRow","setState","rowData","depth","onExpand","rowKey","expandColumnKey","expandIconProps","expandable","expanded","indexOf","extraProps","_getComponent","isScrolling","style","rowClassName","rowRenderer","rowEventHandlers","getRowHeight","rowClass","rowProps","className","_prefixClass","hasFrozenColumns","role","key","getIsResetting","_getIsResetting","cellRenderer","expandIconRenderer","onRowExpand","onRowHover","onRowHeightChange","column","columnIndex","expandIcon","PlaceholderKey","getColumnStyle","dataGetter","cellData","cellProps","container","cell","cellCls","cls","Alignment","CENTER","RIGHT","tagName","rest","Tag","headerIndex","headerClassName","headerRenderer","headerClass","headerProps","sortBy","sortState","headerCellProps","sorting","sortOrder","order","SortOrder","ASC","DESC","sortable","resizable","headerHeight","_getTableHeight","tableWidth","columnsWidth","Math","max","round","getMainColumns","containerHeight","_getFrozenContainerHeight","getLeftFrozenColumnsWidth","getLeftFrozenColumns","noop","getRightFrozenColumnsWidth","scrollbarWidth","getRightFrozenColumns","idx","findIndex","columnWidth","frozen","leftWidth","recomputeColumnsWidth","slice","left","FrozenDirection","rightWidth","footerHeight","footerRenderer","frozenData","emptyRenderer","_getHeaderHeight","top","bottom","overlayRenderer","disabled","classPrefix","_calcScrollbarSizes","_totalRowsHeight","containerStyle","position","renderFooter","renderMainTable","renderLeftTable","renderRightTable","renderResizingLine","renderEmptyLayer","renderOverlay","getScrollbarSize","console","warn","prevProps","prevState","maxHeight","_maybeCallOnEndReached","_maybeScrollbarPresenceChange","ref","name","components","Array","isArray","reduce","sum","tableHeight","frozenRowsHeight","_getFrozenRowsHeight","totalHeight","min","totalColumnsWidth","getTotalColumnsWidth","prevHorizontalScrollbarSize","prevVerticalScrollbarSize","_getBodyHeight","onScrollbarPresenceChange","size","horizontal","vertical","onEndReached","onEndReachedThreshold","scrollHeight","clientHeight","distanceFromEnd","args","lastScrollTop","onScroll","onRowsRendered","overscanStopIndex","hovered","push","index","splice","onExpandedRowsChange","setColumnWidth","getColumn","onColumnResize","onColumnResizeEnd","event","currentTarget","dataset","onColumnSort","React","PureComponent","Column","defaultProps","useIsScrolling","overscanRowCount","defaultGetScrollbarSize","propTypes","PropTypes","string","object","node","arrayOf","shape","array","isRequired","oneOfType","number","func","bool","element","oneOf"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport memoize from 'memoize-one';\n\nimport GridTable from './GridTable';\nimport TableHeaderRow from './TableHeaderRow';\nimport TableRow from './TableRow';\nimport TableHeaderCell from './TableHeaderCell';\nimport TableCell from './TableCell';\nimport Column, { Alignment, FrozenDirection } from './Column';\nimport SortOrder from './SortOrder';\nimport ExpandIcon from './ExpandIcon';\nimport SortIndicator from './SortIndicator';\nimport ColumnResizer from './ColumnResizer';\nimport ColumnManager from './ColumnManager';\n\nimport {\n  renderElement,\n  normalizeColumns,\n  getScrollbarSize as defaultGetScrollbarSize,\n  isObjectEqual,\n  callOrReturn,\n  hasChildren,\n  flattenOnKeys,\n  cloneArray,\n  getValue,\n  throttle,\n  debounce,\n  noop,\n} from './utils';\n\nconst getColumns = memoize((columns, children) => columns || normalizeColumns(children));\n\nconst getContainerStyle = (width, maxWidth, height) => ({\n  width,\n  maxWidth,\n  height,\n  overflow: 'hidden',\n});\n\nconst DEFAULT_COMPONENTS = {\n  TableCell,\n  TableHeaderCell,\n  ExpandIcon,\n  SortIndicator,\n};\n\nconst RESIZE_THROTTLE_WAIT = 50;\n\n// used for memoization\nconst EMPTY_ARRAY = [];\n\n/**\n * React table component\n */\nclass BaseTable extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    const { columns, children, defaultExpandedRowKeys } = props;\n    this.state = {\n      scrollbarSize: 0,\n      hoveredRowKey: null,\n      resizingKey: null,\n      resizingWidth: 0,\n      expandedRowKeys: cloneArray(defaultExpandedRowKeys),\n    };\n    this.columnManager = new ColumnManager(getColumns(columns, children), props.fixed);\n\n    this._setContainerRef = this._setContainerRef.bind(this);\n    this._setMainTableRef = this._setMainTableRef.bind(this);\n    this._setLeftTableRef = this._setLeftTableRef.bind(this);\n    this._setRightTableRef = this._setRightTableRef.bind(this);\n\n    this.renderExpandIcon = this.renderExpandIcon.bind(this);\n    this.renderRow = this.renderRow.bind(this);\n    this.renderRowCell = this.renderRowCell.bind(this);\n    this.renderHeader = this.renderHeader.bind(this);\n    this.renderHeaderCell = this.renderHeaderCell.bind(this);\n\n    this._handleScroll = this._handleScroll.bind(this);\n    this._handleVerticalScroll = this._handleVerticalScroll.bind(this);\n    this._handleRowsRendered = this._handleRowsRendered.bind(this);\n    this._handleRowHover = this._handleRowHover.bind(this);\n    this._handleRowExpand = this._handleRowExpand.bind(this);\n    this._handleColumnResize = throttle(this._handleColumnResize.bind(this), RESIZE_THROTTLE_WAIT);\n    this._handleColumnResizeStart = this._handleColumnResizeStart.bind(this);\n    this._handleColumnResizeStop = this._handleColumnResizeStop.bind(this);\n    this._handleColumnSort = this._handleColumnSort.bind(this);\n    this._handleFrozenRowHeightChange = this._handleFrozenRowHeightChange.bind(this);\n    this._handleRowHeightChange = this._handleRowHeightChange.bind(this);\n\n    this._getLeftTableContainerStyle = memoize(getContainerStyle);\n    this._getRightTableContainerStyle = memoize(getContainerStyle);\n    this._flattenOnKeys = memoize((tree, keys, dataKey) => {\n      this._depthMap = {};\n      return flattenOnKeys(tree, keys, this._depthMap, dataKey);\n    });\n    this._resetColumnManager = memoize((columns, fixed) => {\n      this.columnManager.reset(columns, fixed);\n\n      if (this.props.estimatedRowHeight && fixed) {\n        if (!this.columnManager.hasLeftFrozenColumns()) {\n          this._leftRowHeightMap = {};\n        }\n        if (!this.columnManager.hasRightFrozenColumns()) {\n          this._rightRowHeightMap = {};\n        }\n      }\n    }, isObjectEqual);\n\n    this._isResetting = false;\n    this._resetIndex = null;\n    this._rowHeightMap = {};\n    this._rowHeightMapBuffer = {};\n    this._mainRowHeightMap = {};\n    this._leftRowHeightMap = {};\n    this._rightRowHeightMap = {};\n    this._getRowHeight = this._getRowHeight.bind(this);\n    this._updateRowHeights = debounce(() => {\n      this._isResetting = true;\n      this._rowHeightMap = { ...this._rowHeightMap, ...this._rowHeightMapBuffer };\n      this.resetAfterRowIndex(this._resetIndex, false);\n      this._rowHeightMapBuffer = {};\n      this._resetIndex = null;\n      this.forceUpdateTable();\n      this.forceUpdate();\n      this._isResetting = false;\n    }, 0);\n\n    this._scroll = { scrollLeft: 0, scrollTop: 0 };\n    this._scrollHeight = 0;\n    this._lastScannedRowIndex = -1;\n    this._hasDataChangedSinceEndReached = true;\n\n    this._data = props.data;\n    this._depthMap = {};\n\n    this._horizontalScrollbarSize = 0;\n    this._verticalScrollbarSize = 0;\n    this._scrollbarPresenceChanged = false;\n  }\n\n  /**\n   * Get the DOM node of the table\n   */\n  getDOMNode() {\n    return this.tableNode;\n  }\n\n  /**\n   * Get the column manager\n   */\n  getColumnManager() {\n    return this.columnManager;\n  }\n\n  /**\n   * Get internal `expandedRowKeys` state\n   */\n  getExpandedRowKeys() {\n    const { expandedRowKeys } = this.props;\n    return expandedRowKeys !== undefined ? expandedRowKeys || EMPTY_ARRAY : this.state.expandedRowKeys;\n  }\n\n  /**\n   * Get the expanded state, fallback to normal state if not expandable.\n   */\n  getExpandedState() {\n    return {\n      expandedData: this._data,\n      expandedRowKeys: this.getExpandedRowKeys(),\n      expandedDepthMap: this._depthMap,\n    };\n  }\n\n  /**\n   * Get the total height of all rows, including expanded rows.\n   */\n  getTotalRowsHeight() {\n    const { rowHeight, estimatedRowHeight, totalRowsHeight } = this.props;\n\n    if (totalRowsHeight) {\n      return totalRowsHeight;\n    }\n\n    if (estimatedRowHeight) {\n      return this.table ? this.table.getTotalRowsHeight() : this._data.length * estimatedRowHeight;\n    }\n    return this._data.length * rowHeight;\n  }\n\n  /**\n   * Get the total width of all columns.\n   */\n  getTotalColumnsWidth() {\n    return this.columnManager.getColumnsWidth();\n  }\n\n  /**\n   * Forcefully re-render the inner Grid component.\n   *\n   * Calling `forceUpdate` on `Table` may not re-render the inner Grid since it uses `shallowCompare` as a performance optimization.\n   * Use this method if you want to manually trigger a re-render.\n   * This may be appropriate if the underlying row data has changed but the row sizes themselves have not.\n   */\n  forceUpdateTable() {\n    this.table && this.table.forceUpdateTable();\n    this.leftTable && this.leftTable.forceUpdateTable();\n    this.rightTable && this.rightTable.forceUpdateTable();\n  }\n\n  /**\n   * Reset cached offsets for positioning after a specific rowIndex, should be used only in dynamic mode(estimatedRowHeight is provided)\n   */\n  resetAfterRowIndex(rowIndex = 0, shouldForceUpdate = true) {\n    if (!this.props.estimatedRowHeight) return;\n\n    this.table && this.table.resetAfterRowIndex(rowIndex, shouldForceUpdate);\n    this.leftTable && this.leftTable.resetAfterRowIndex(rowIndex, shouldForceUpdate);\n    this.rightTable && this.rightTable.resetAfterRowIndex(rowIndex, shouldForceUpdate);\n  }\n\n  /**\n   * Reset row height cache, useful if `data` changed entirely, should be used only in dynamic mode(estimatedRowHeight is provided)\n   */\n  resetRowHeightCache() {\n    if (!this.props.estimatedRowHeight) return;\n\n    this._resetIndex = null;\n    this._rowHeightMapBuffer = {};\n    this._rowHeightMap = {};\n    this._mainRowHeightMap = {};\n    this._leftRowHeightMap = {};\n    this._rightRowHeightMap = {};\n  }\n\n  /**\n   * Scroll to the specified offset.\n   * Useful for animating position changes.\n   *\n   * @param {object} offset\n   */\n  scrollToPosition(offset) {\n    this._scroll = offset;\n\n    this.table && this.table.scrollToPosition(offset);\n    this.leftTable && this.leftTable.scrollToTop(offset.scrollTop);\n    this.rightTable && this.rightTable.scrollToTop(offset.scrollTop);\n  }\n\n  /**\n   * Scroll to the specified offset vertically.\n   *\n   * @param {number} scrollTop\n   */\n  scrollToTop(scrollTop) {\n    this._scroll.scrollTop = scrollTop;\n\n    this.table && this.table.scrollToPosition(this._scroll);\n    this.leftTable && this.leftTable.scrollToTop(scrollTop);\n    this.rightTable && this.rightTable.scrollToTop(scrollTop);\n  }\n\n  /**\n   * Scroll to the specified offset horizontally.\n   *\n   * @param {number} scrollLeft\n   */\n  scrollToLeft(scrollLeft) {\n    this._scroll.scrollLeft = scrollLeft;\n\n    this.table && this.table.scrollToPosition(this._scroll);\n  }\n\n  /**\n   * Scroll to the specified row.\n   * By default, the table will scroll as little as possible to ensure the row is visible.\n   * You can control the alignment of the row though by specifying an align property. Acceptable values are:\n   *\n   * - `auto` (default) - Scroll as little as possible to ensure the row is visible.\n   * - `smart` - Same as `auto` if it is less than one viewport away, or it's the same as`center`.\n   * - `center` - Center align the row within the table.\n   * - `end` - Align the row to the bottom side of the table.\n   * - `start` - Align the row to the top side of the table.\n\n   * @param {number} rowIndex\n   * @param {string} align\n   */\n  scrollToRow(rowIndex = 0, align = 'auto') {\n    this.table && this.table.scrollToRow(rowIndex, align);\n    this.leftTable && this.leftTable.scrollToRow(rowIndex, align);\n    this.rightTable && this.rightTable.scrollToRow(rowIndex, align);\n  }\n\n  /**\n   * Set `expandedRowKeys` manually.\n   * This method is available only if `expandedRowKeys` is uncontrolled.\n   *\n   * @param {array} expandedRowKeys\n   */\n  setExpandedRowKeys(expandedRowKeys) {\n    // if `expandedRowKeys` is controlled\n    if (this.props.expandedRowKeys !== undefined) return;\n\n    this.setState({\n      expandedRowKeys: cloneArray(expandedRowKeys),\n    });\n  }\n\n  renderExpandIcon({ rowData, rowIndex, depth, onExpand }) {\n    const { rowKey, expandColumnKey, expandIconProps } = this.props;\n    if (!expandColumnKey) return null;\n\n    const expandable = rowIndex >= 0 && hasChildren(rowData);\n    const expanded = rowIndex >= 0 && this.getExpandedRowKeys().indexOf(rowData[rowKey]) >= 0;\n    const extraProps = callOrReturn(expandIconProps, { rowData, rowIndex, depth, expandable, expanded });\n    const ExpandIcon = this._getComponent('ExpandIcon');\n\n    return <ExpandIcon depth={depth} expandable={expandable} expanded={expanded} {...extraProps} onExpand={onExpand} />;\n  }\n\n  renderRow({ isScrolling, columns, rowData, rowIndex, style }) {\n    const { rowClassName, rowRenderer, rowEventHandlers, expandColumnKey, estimatedRowHeight, getRowHeight } = this.props;\n\n    const rowClass = callOrReturn(rowClassName, { columns, rowData, rowIndex });\n    const extraProps = callOrReturn(this.props.rowProps, { columns, rowData, rowIndex });\n    const rowKey = rowData[this.props.rowKey];\n    const depth = this._depthMap[rowKey] || 0;\n\n    const className = cn(this._prefixClass('row'), rowClass, {\n      [this._prefixClass(`row--depth-${depth}`)]: !!expandColumnKey && rowIndex >= 0,\n      [this._prefixClass('row--expanded')]: !!expandColumnKey && this.getExpandedRowKeys().indexOf(rowKey) >= 0,\n      [this._prefixClass('row--hovered')]: !isScrolling && rowKey === this.state.hoveredRowKey,\n      [this._prefixClass('row--frozen')]: depth === 0 && rowIndex < 0,\n      [this._prefixClass('row--customized')]: rowRenderer,\n    });\n\n    const hasFrozenColumns = this.columnManager.hasFrozenColumns();\n    const rowProps = {\n      ...extraProps,\n      role: 'row',\n      key: `row-${rowKey}`,\n      isScrolling,\n      className,\n      style,\n      columns,\n      rowIndex,\n      rowData,\n      rowKey,\n      expandColumnKey,\n      depth,\n      rowEventHandlers,\n      rowRenderer,\n      // for frozen rows we use fixed rowHeight\n      estimatedRowHeight: !getRowHeight && rowIndex >= 0 ? estimatedRowHeight : undefined,\n      getIsResetting: this._getIsResetting,\n      cellRenderer: this.renderRowCell,\n      expandIconRenderer: this.renderExpandIcon,\n      onRowExpand: this._handleRowExpand,\n      // for fixed table, we need to sync the hover state across the inner tables\n      onRowHover: hasFrozenColumns ? this._handleRowHover : null,\n      onRowHeightChange: hasFrozenColumns ? this._handleFrozenRowHeightChange : this._handleRowHeightChange,\n    };\n\n    return <TableRow {...rowProps} />;\n  }\n\n  renderRowCell({ isScrolling, columns, column, columnIndex, rowData, rowIndex, expandIcon }) {\n    if (column[ColumnManager.PlaceholderKey]) {\n      return (\n        <div\n          key={`row-${rowData[this.props.rowKey]}-cell-${column.key}-placeholder`}\n          className={this._prefixClass('row-cell-placeholder')}\n          style={this.columnManager.getColumnStyle(column.key)}\n        />\n      );\n    }\n\n    const { className, dataKey, dataGetter, cellRenderer } = column;\n    const TableCell = this._getComponent('TableCell');\n\n    const cellData = dataGetter\n      ? dataGetter({ columns, column, columnIndex, rowData, rowIndex })\n      : getValue(rowData, dataKey);\n    const cellProps = { isScrolling, cellData, columns, column, columnIndex, rowData, rowIndex, container: this };\n    const cell = renderElement(cellRenderer || <TableCell className={this._prefixClass('row-cell-text')} />, cellProps);\n\n    const cellCls = callOrReturn(className, { cellData, columns, column, columnIndex, rowData, rowIndex });\n    const cls = cn(this._prefixClass('row-cell'), cellCls, {\n      [this._prefixClass('row-cell--align-center')]: column.align === Alignment.CENTER,\n      [this._prefixClass('row-cell--align-right')]: column.align === Alignment.RIGHT,\n    });\n\n    const extraProps = callOrReturn(this.props.cellProps, { columns, column, columnIndex, rowData, rowIndex });\n    const { tagName, ...rest } = extraProps || {};\n    const Tag = tagName || 'div';\n    return (\n      <Tag\n        role=\"gridcell\"\n        key={`row-${rowData[this.props.rowKey]}-cell-${column.key}`}\n        {...rest}\n        className={cls}\n        style={this.columnManager.getColumnStyle(column.key)}\n      >\n        {expandIcon}\n        {cell}\n      </Tag>\n    );\n  }\n\n  renderHeader({ columns, headerIndex, style }) {\n    const { headerClassName, headerRenderer } = this.props;\n\n    const headerClass = callOrReturn(headerClassName, { columns, headerIndex });\n    const extraProps = callOrReturn(this.props.headerProps, { columns, headerIndex });\n\n    const className = cn(this._prefixClass('header-row'), headerClass, {\n      [this._prefixClass('header-row--resizing')]: !!this.state.resizingKey,\n      [this._prefixClass('header-row--customized')]: headerRenderer,\n    });\n\n    const headerProps = {\n      ...extraProps,\n      role: 'row',\n      key: `header-${headerIndex}`,\n      className,\n      style,\n      columns,\n      headerIndex,\n      headerRenderer,\n      cellRenderer: this.renderHeaderCell,\n      expandColumnKey: this.props.expandColumnKey,\n      expandIcon: this._getComponent('ExpandIcon'),\n    };\n\n    return <TableHeaderRow {...headerProps} />;\n  }\n\n  renderHeaderCell({ columns, column, columnIndex, headerIndex, expandIcon }) {\n    if (column[ColumnManager.PlaceholderKey]) {\n      return (\n        <div\n          key={`header-${headerIndex}-cell-${column.key}-placeholder`}\n          className={this._prefixClass('header-cell-placeholder')}\n          style={this.columnManager.getColumnStyle(column.key)}\n        />\n      );\n    }\n\n    const { headerClassName, headerRenderer } = column;\n    const { sortBy, sortState, headerCellProps } = this.props;\n    const TableHeaderCell = this._getComponent('TableHeaderCell');\n    const SortIndicator = this._getComponent('SortIndicator');\n\n    const cellProps = { columns, column, columnIndex, headerIndex, container: this };\n    const cell = renderElement(\n      headerRenderer || <TableHeaderCell className={this._prefixClass('header-cell-text')} />,\n      cellProps\n    );\n\n    let sorting, sortOrder;\n\n    if (sortState) {\n      const order = sortState[column.key];\n      sorting = order === SortOrder.ASC || order === SortOrder.DESC;\n      sortOrder = sorting ? order : SortOrder.ASC;\n    } else {\n      sorting = column.key === sortBy.key;\n      sortOrder = sorting ? sortBy.order : SortOrder.ASC;\n    }\n\n    const cellCls = callOrReturn(headerClassName, { columns, column, columnIndex, headerIndex });\n    const cls = cn(this._prefixClass('header-cell'), cellCls, {\n      [this._prefixClass('header-cell--align-center')]: column.align === Alignment.CENTER,\n      [this._prefixClass('header-cell--align-right')]: column.align === Alignment.RIGHT,\n      [this._prefixClass('header-cell--sortable')]: column.sortable,\n      [this._prefixClass('header-cell--sorting')]: sorting,\n      [this._prefixClass('header-cell--resizing')]: column.key === this.state.resizingKey,\n    });\n    const extraProps = callOrReturn(headerCellProps, { columns, column, columnIndex, headerIndex });\n    const { tagName, ...rest } = extraProps || {};\n    const Tag = tagName || 'div';\n    return (\n      <Tag\n        role=\"gridcell\"\n        key={`header-${headerIndex}-cell-${column.key}`}\n        onClick={column.sortable ? this._handleColumnSort : null}\n        {...rest}\n        className={cls}\n        style={this.columnManager.getColumnStyle(column.key)}\n        data-key={column.key}\n      >\n        {expandIcon}\n        {cell}\n        {column.sortable && (\n          <SortIndicator\n            sortOrder={sortOrder}\n            className={cn(this._prefixClass('sort-indicator'), {\n              [this._prefixClass('sort-indicator--descending')]: sortOrder === SortOrder.DESC,\n            })}\n          />\n        )}\n        {column.resizable && (\n          <ColumnResizer\n            className={this._prefixClass('column-resizer')}\n            column={column}\n            onResizeStart={this._handleColumnResizeStart}\n            onResizeStop={this._handleColumnResizeStop}\n            onResize={this._handleColumnResize}\n          />\n        )}\n      </Tag>\n    );\n  }\n\n  renderMainTable() {\n    const { width, headerHeight, rowHeight, fixed, estimatedRowHeight, ...rest } = this.props;\n    const height = this._getTableHeight();\n\n    let tableWidth = width - this._verticalScrollbarSize;\n    if (fixed) {\n      const columnsWidth = this.columnManager.getColumnsWidth();\n      // make sure `scrollLeft` is always integer to fix a sync bug when scrolling to end horizontally\n      tableWidth = Math.max(Math.round(columnsWidth), tableWidth);\n    }\n    return (\n      <GridTable\n        {...rest}\n        {...this.state}\n        className={this._prefixClass('table-main')}\n        ref={this._setMainTableRef}\n        data={this._data}\n        columns={this.columnManager.getMainColumns()}\n        width={width}\n        height={height}\n        headerHeight={headerHeight}\n        rowHeight={rowHeight}\n        estimatedRowHeight={estimatedRowHeight}\n        getRowHeight={estimatedRowHeight ? this._getRowHeight : undefined}\n        headerWidth={tableWidth + (fixed ? this._verticalScrollbarSize : 0)}\n        bodyWidth={tableWidth}\n        headerRenderer={this.renderHeader}\n        rowRenderer={this.renderRow}\n        onScroll={this._handleScroll}\n        onRowsRendered={this._handleRowsRendered}\n      />\n    );\n  }\n\n  renderLeftTable() {\n    if (!this.columnManager.hasLeftFrozenColumns()) return null;\n\n    const { width, headerHeight, rowHeight, estimatedRowHeight, ...rest } = this.props;\n\n    const containerHeight = this._getFrozenContainerHeight();\n    const offset = this._verticalScrollbarSize || 20;\n    const columnsWidth = this.columnManager.getLeftFrozenColumnsWidth();\n    return (\n      <GridTable\n        {...rest}\n        {...this.state}\n        containerStyle={this._getLeftTableContainerStyle(columnsWidth, width, containerHeight)}\n        className={this._prefixClass('table-frozen-left')}\n        ref={this._setLeftTableRef}\n        data={this._data}\n        columns={this.columnManager.getLeftFrozenColumns()}\n        width={columnsWidth + offset}\n        height={containerHeight}\n        headerHeight={headerHeight}\n        rowHeight={rowHeight}\n        estimatedRowHeight={estimatedRowHeight}\n        getRowHeight={estimatedRowHeight ? this._getRowHeight : undefined}\n        headerWidth={columnsWidth + offset}\n        bodyWidth={columnsWidth + offset}\n        headerRenderer={this.renderHeader}\n        rowRenderer={this.renderRow}\n        onScroll={this._handleVerticalScroll}\n        onRowsRendered={noop}\n      />\n    );\n  }\n\n  renderRightTable() {\n    if (!this.columnManager.hasRightFrozenColumns()) return null;\n\n    const { width, headerHeight, rowHeight, estimatedRowHeight, ...rest } = this.props;\n\n    const containerHeight = this._getFrozenContainerHeight();\n    const columnsWidth = this.columnManager.getRightFrozenColumnsWidth();\n    const scrollbarWidth = this._verticalScrollbarSize;\n    return (\n      <GridTable\n        {...rest}\n        {...this.state}\n        containerStyle={this._getLeftTableContainerStyle(columnsWidth + scrollbarWidth, width, containerHeight)}\n        className={this._prefixClass('table-frozen-right')}\n        ref={this._setRightTableRef}\n        data={this._data}\n        columns={this.columnManager.getRightFrozenColumns()}\n        width={columnsWidth + scrollbarWidth}\n        height={containerHeight}\n        headerHeight={headerHeight}\n        rowHeight={rowHeight}\n        estimatedRowHeight={estimatedRowHeight}\n        getRowHeight={estimatedRowHeight ? this._getRowHeight : undefined}\n        headerWidth={columnsWidth + scrollbarWidth}\n        bodyWidth={columnsWidth}\n        headerRenderer={this.renderHeader}\n        rowRenderer={this.renderRow}\n        onScroll={this._handleVerticalScroll}\n        onRowsRendered={noop}\n      />\n    );\n  }\n\n  renderResizingLine() {\n    const { width, fixed } = this.props;\n    const { resizingKey } = this.state;\n    if (!fixed || !resizingKey) return null;\n\n    const columns = this.columnManager.getMainColumns();\n    const idx = columns.findIndex(column => column.key === resizingKey);\n    const column = columns[idx];\n    const { width: columnWidth, frozen } = column;\n    const leftWidth = this.columnManager.recomputeColumnsWidth(columns.slice(0, idx));\n\n    let left = leftWidth + columnWidth;\n    if (!frozen) {\n      left -= this._scroll.scrollLeft;\n    } else if (frozen === FrozenDirection.RIGHT) {\n      const rightWidth = this.columnManager.recomputeColumnsWidth(columns.slice(idx + 1));\n      if (rightWidth + columnWidth > width - this._verticalScrollbarSize) {\n        left = columnWidth;\n      } else {\n        left = width - this._verticalScrollbarSize - rightWidth;\n      }\n    }\n    const style = {\n      left,\n      height: this._getTableHeight() - this._horizontalScrollbarSize,\n    };\n    return <div className={this._prefixClass('resizing-line')} style={style} />;\n  }\n\n  renderFooter() {\n    const { footerHeight, footerRenderer } = this.props;\n    if (footerHeight === 0) return null;\n    return (\n      <div className={this._prefixClass('footer')} style={{ height: footerHeight }}>\n        {renderElement(footerRenderer)}\n      </div>\n    );\n  }\n\n  renderEmptyLayer() {\n    const { data, frozenData, footerHeight, emptyRenderer } = this.props;\n\n    if ((data && data.length) || (frozenData && frozenData.length)) return null;\n    const headerHeight = this._getHeaderHeight();\n    return (\n      <div className={this._prefixClass('empty-layer')} style={{ top: headerHeight, bottom: footerHeight }}>\n        {renderElement(emptyRenderer)}\n      </div>\n    );\n  }\n\n  renderOverlay() {\n    const { overlayRenderer } = this.props;\n\n    return <div className={this._prefixClass('overlay')}>{!!overlayRenderer && renderElement(overlayRenderer)}</div>;\n  }\n\n  render() {\n    const {\n      columns,\n      children,\n      width,\n      fixed,\n      data,\n      frozenData,\n      expandColumnKey,\n      disabled,\n      className,\n      style,\n      footerHeight,\n      classPrefix,\n      estimatedRowHeight,\n    } = this.props;\n    this._resetColumnManager(getColumns(columns, children), fixed);\n\n    const _data = expandColumnKey ? this._flattenOnKeys(data, this.getExpandedRowKeys(), this.props.rowKey) : data;\n    if (this._data !== _data) {\n      this.resetAfterRowIndex(0, false);\n      this._data = _data;\n    }\n    // should be after `this._data` assigned\n    this._calcScrollbarSizes();\n    this._totalRowsHeight = this.getTotalRowsHeight();\n\n    const containerStyle = {\n      ...style,\n      width,\n      height: this._getTableHeight() + footerHeight,\n      position: 'relative',\n    };\n    const cls = cn(classPrefix, className, {\n      [`${classPrefix}--fixed`]: fixed,\n      [`${classPrefix}--expandable`]: !!expandColumnKey,\n      [`${classPrefix}--empty`]: data.length === 0,\n      [`${classPrefix}--has-frozen-rows`]: frozenData.length > 0,\n      [`${classPrefix}--has-frozen-columns`]: this.columnManager.hasFrozenColumns(),\n      [`${classPrefix}--disabled`]: disabled,\n      [`${classPrefix}--dynamic`]: estimatedRowHeight > 0,\n    });\n    return (\n      <div ref={this._setContainerRef} className={cls} style={containerStyle}>\n        {this.renderFooter()}\n        {this.renderMainTable()}\n        {this.renderLeftTable()}\n        {this.renderRightTable()}\n        {this.renderResizingLine()}\n        {this.renderEmptyLayer()}\n        {this.renderOverlay()}\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    const scrollbarSize = this.props.getScrollbarSize();\n    if (scrollbarSize > 0) {\n      this.setState({ scrollbarSize });\n    }\n\n    if (this.props.getRowHeight && !this.props.estimatedRowHeight) {\n      console.warn(`getRowHeight only works in combination with estimatedRowHeight. \n      Please provide an estimatedRowHeight.`);\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { data, height, maxHeight, estimatedRowHeight } = this.props;\n    if (data !== prevProps.data) {\n      this._lastScannedRowIndex = -1;\n      this._hasDataChangedSinceEndReached = true;\n    }\n\n    if (maxHeight !== prevProps.maxHeight || height !== prevProps.height) {\n      this._maybeCallOnEndReached();\n    }\n    this._maybeScrollbarPresenceChange();\n\n    if (estimatedRowHeight) {\n      if (this.getTotalRowsHeight() !== this._totalRowsHeight) {\n        this.forceUpdate();\n      }\n    }\n  }\n\n  _prefixClass(className) {\n    return `${this.props.classPrefix}__${className}`;\n  }\n\n  _setContainerRef(ref) {\n    this.tableNode = ref;\n  }\n\n  _setMainTableRef(ref) {\n    this.table = ref;\n  }\n\n  _setLeftTableRef(ref) {\n    this.leftTable = ref;\n  }\n\n  _setRightTableRef(ref) {\n    this.rightTable = ref;\n  }\n\n  _getComponent(name) {\n    if (this.props.components && this.props.components[name]) return this.props.components[name];\n    return DEFAULT_COMPONENTS[name];\n  }\n\n  // for dynamic row height\n  _getRowHeight(rowIndex) {\n    const { estimatedRowHeight, rowKey, getRowHeight } = this.props;\n    return getRowHeight\n      ? getRowHeight({ rowData: this._data[rowIndex] })\n      : this._rowHeightMap[this._data[rowIndex][rowKey]] || estimatedRowHeight;\n  }\n\n  _getIsResetting() {\n    return this._isResetting;\n  }\n\n  _getHeaderHeight() {\n    const { headerHeight } = this.props;\n    if (Array.isArray(headerHeight)) {\n      return headerHeight.reduce((sum, height) => sum + height, 0);\n    }\n    return headerHeight;\n  }\n\n  _getFrozenRowsHeight() {\n    const { frozenData, rowHeight } = this.props;\n    return frozenData.length * rowHeight;\n  }\n\n  _getTableHeight() {\n    const { height, maxHeight, footerHeight } = this.props;\n    let tableHeight = height - footerHeight;\n\n    if (maxHeight > 0) {\n      const frozenRowsHeight = this._getFrozenRowsHeight();\n      const totalRowsHeight = this.getTotalRowsHeight();\n      const headerHeight = this._getHeaderHeight();\n      const totalHeight = headerHeight + frozenRowsHeight + totalRowsHeight + this._horizontalScrollbarSize;\n      tableHeight = Math.min(totalHeight, maxHeight - footerHeight);\n    }\n\n    return tableHeight;\n  }\n\n  _getBodyHeight() {\n    return this._getTableHeight() - this._getHeaderHeight() - this._getFrozenRowsHeight();\n  }\n\n  _getFrozenContainerHeight() {\n    const { maxHeight } = this.props;\n\n    const tableHeight = this._getTableHeight() - (this._data.length > 0 ? this._horizontalScrollbarSize : 0);\n    // in auto height mode tableHeight = totalHeight\n    if (maxHeight > 0) return tableHeight;\n\n    const totalHeight = this.getTotalRowsHeight() + this._getHeaderHeight() + this._getFrozenRowsHeight();\n    return Math.min(tableHeight, totalHeight);\n  }\n\n  _calcScrollbarSizes() {\n    const { fixed, width } = this.props;\n    const { scrollbarSize } = this.state;\n\n    const totalRowsHeight = this.getTotalRowsHeight();\n    const totalColumnsWidth = this.getTotalColumnsWidth();\n\n    const prevHorizontalScrollbarSize = this._horizontalScrollbarSize;\n    const prevVerticalScrollbarSize = this._verticalScrollbarSize;\n\n    if (scrollbarSize === 0) {\n      this._horizontalScrollbarSize = 0;\n      this._verticalScrollbarSize = 0;\n    } else {\n      // we have to set `this._horizontalScrollbarSize` before calling `this._getBodyHeight`\n      if (!fixed || totalColumnsWidth <= width - scrollbarSize) {\n        this._horizontalScrollbarSize = 0;\n        this._verticalScrollbarSize = totalRowsHeight > this._getBodyHeight() ? scrollbarSize : 0;\n      } else {\n        if (totalColumnsWidth > width) {\n          this._horizontalScrollbarSize = scrollbarSize;\n          this._verticalScrollbarSize =\n            totalRowsHeight > this._getBodyHeight() - this._horizontalScrollbarSize ? scrollbarSize : 0;\n        } else {\n          this._horizontalScrollbarSize = 0;\n          this._verticalScrollbarSize = 0;\n          if (totalRowsHeight > this._getBodyHeight()) {\n            this._horizontalScrollbarSize = scrollbarSize;\n            this._verticalScrollbarSize = scrollbarSize;\n          }\n        }\n      }\n    }\n\n    if (\n      prevHorizontalScrollbarSize !== this._horizontalScrollbarSize ||\n      prevVerticalScrollbarSize !== this._verticalScrollbarSize\n    ) {\n      this._scrollbarPresenceChanged = true;\n    }\n  }\n\n  _maybeScrollbarPresenceChange() {\n    if (this._scrollbarPresenceChanged) {\n      const { onScrollbarPresenceChange } = this.props;\n      this._scrollbarPresenceChanged = false;\n\n      onScrollbarPresenceChange({\n        size: this.state.scrollbarSize,\n        horizontal: this._horizontalScrollbarSize > 0,\n        vertical: this._verticalScrollbarSize > 0,\n      });\n    }\n  }\n\n  _maybeCallOnEndReached() {\n    const { onEndReached, onEndReachedThreshold } = this.props;\n    const { scrollTop } = this._scroll;\n    const scrollHeight = this.getTotalRowsHeight();\n    const clientHeight = this._getBodyHeight();\n\n    if (!onEndReached || !clientHeight || !scrollHeight) return;\n    const distanceFromEnd = scrollHeight - scrollTop - clientHeight + this._horizontalScrollbarSize;\n    if (\n      this._lastScannedRowIndex >= 0 &&\n      distanceFromEnd <= onEndReachedThreshold &&\n      (this._hasDataChangedSinceEndReached || scrollHeight !== this._scrollHeight)\n    ) {\n      this._hasDataChangedSinceEndReached = false;\n      this._scrollHeight = scrollHeight;\n      onEndReached({ distanceFromEnd });\n    }\n  }\n\n  _handleScroll(args) {\n    const lastScrollTop = this._scroll.scrollTop;\n    this.scrollToPosition(args);\n    this.props.onScroll(args);\n\n    if (args.scrollTop > lastScrollTop) this._maybeCallOnEndReached();\n  }\n\n  _handleVerticalScroll({ scrollTop }) {\n    const lastScrollTop = this._scroll.scrollTop;\n\n    if (scrollTop !== lastScrollTop) this.scrollToTop(scrollTop);\n    if (scrollTop > lastScrollTop) this._maybeCallOnEndReached();\n  }\n\n  _handleRowsRendered(args) {\n    this.props.onRowsRendered(args);\n\n    if (args.overscanStopIndex > this._lastScannedRowIndex) {\n      this._lastScannedRowIndex = args.overscanStopIndex;\n      this._maybeCallOnEndReached();\n    }\n  }\n\n  _handleRowHover({ hovered, rowKey }) {\n    this.setState({ hoveredRowKey: hovered ? rowKey : null });\n  }\n\n  _handleRowExpand({ expanded, rowData, rowIndex, rowKey }) {\n    const expandedRowKeys = cloneArray(this.getExpandedRowKeys());\n    if (expanded) {\n      if (!expandedRowKeys.indexOf(rowKey) >= 0) expandedRowKeys.push(rowKey);\n    } else {\n      const index = expandedRowKeys.indexOf(rowKey);\n      if (index > -1) {\n        expandedRowKeys.splice(index, 1);\n      }\n    }\n    // if `expandedRowKeys` is uncontrolled, update internal state\n    if (this.props.expandedRowKeys === undefined) {\n      this.setState({ expandedRowKeys });\n    }\n    this.props.onRowExpand({ expanded, rowData, rowIndex, rowKey });\n    this.props.onExpandedRowsChange(expandedRowKeys);\n  }\n\n  _handleColumnResize({ key }, width) {\n    this.columnManager.setColumnWidth(key, width);\n    this.setState({ resizingWidth: width });\n\n    const column = this.columnManager.getColumn(key);\n    this.props.onColumnResize({ column, width });\n  }\n\n  _handleColumnResizeStart({ key }) {\n    this.setState({ resizingKey: key });\n  }\n\n  _handleColumnResizeStop() {\n    const { resizingKey, resizingWidth } = this.state;\n    this.setState({ resizingKey: null, resizingWidth: 0 });\n\n    if (!resizingKey || !resizingWidth) return;\n\n    const column = this.columnManager.getColumn(resizingKey);\n    this.props.onColumnResizeEnd({ column, width: resizingWidth });\n  }\n\n  _handleColumnSort(event) {\n    const key = event.currentTarget.dataset.key;\n    const { sortBy, sortState, onColumnSort } = this.props;\n    let order = SortOrder.ASC;\n\n    if (sortState) {\n      order = sortState[key] === SortOrder.ASC ? SortOrder.DESC : SortOrder.ASC;\n    } else if (key === sortBy.key) {\n      order = sortBy.order === SortOrder.ASC ? SortOrder.DESC : SortOrder.ASC;\n    }\n\n    const column = this.columnManager.getColumn(key);\n    onColumnSort({ column, key, order });\n  }\n\n  _handleFrozenRowHeightChange(rowKey, size, rowIndex, frozen) {\n    if (!frozen) {\n      this._mainRowHeightMap[rowKey] = size;\n    } else if (frozen === FrozenDirection.RIGHT) {\n      this._rightRowHeightMap[rowKey] = size;\n    } else {\n      this._leftRowHeightMap[rowKey] = size;\n    }\n\n    const height = Math.max(\n      this._mainRowHeightMap[rowKey] || 0,\n      this._leftRowHeightMap[rowKey] || 0,\n      this._rightRowHeightMap[rowKey] || 0\n    );\n\n    if (this._rowHeightMap[rowKey] !== height) {\n      this._handleRowHeightChange(rowKey, height, rowIndex);\n    }\n  }\n\n  _handleRowHeightChange(rowKey, size, rowIndex) {\n    if (this._resetIndex === null) this._resetIndex = rowIndex;\n    else if (this._resetIndex > rowIndex) this._resetIndex = rowIndex;\n\n    this._rowHeightMapBuffer[rowKey] = size;\n    this._updateRowHeights();\n  }\n}\n\nBaseTable.Column = Column;\nBaseTable.PlaceholderKey = ColumnManager.PlaceholderKey;\n\nBaseTable.defaultProps = {\n  classPrefix: 'BaseTable',\n  rowKey: 'id',\n  data: [],\n  frozenData: [],\n  fixed: false,\n  headerHeight: 50,\n  rowHeight: 50,\n  footerHeight: 0,\n  defaultExpandedRowKeys: [],\n  sortBy: {},\n  useIsScrolling: false,\n  overscanRowCount: 1,\n  onEndReachedThreshold: 500,\n  getScrollbarSize: defaultGetScrollbarSize,\n\n  onScroll: noop,\n  onRowsRendered: noop,\n  onScrollbarPresenceChange: noop,\n  onRowExpand: noop,\n  onExpandedRowsChange: noop,\n  onColumnSort: noop,\n  onColumnResize: noop,\n  onColumnResizeEnd: noop,\n};\n\nBaseTable.propTypes = {\n  /**\n   * Prefix for table's inner className\n   */\n  classPrefix: PropTypes.string,\n  /**\n   * Class name for the table\n   */\n  className: PropTypes.string,\n  /**\n   * Custom style for the table\n   */\n  style: PropTypes.object,\n  /**\n   * A collection of Column\n   */\n  children: PropTypes.node,\n  /**\n   * Columns for the table\n   */\n  columns: PropTypes.arrayOf(PropTypes.shape(Column.propTypes)),\n  /**\n   * The data for the table\n   */\n  data: PropTypes.array.isRequired,\n  /**\n   * The data be frozen to top, `rowIndex` is negative and started from `-1`\n   */\n  frozenData: PropTypes.array,\n  /**\n   * The key field of each data item\n   */\n  rowKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  /**\n   * The width of the table\n   */\n  width: PropTypes.number.isRequired,\n  /**\n   * The height of the table, will be ignored if `maxHeight` is set\n   */\n  height: PropTypes.number,\n  /**\n   * The max height of the table, the table's height will auto change when data changes,\n   * will turns to vertical scroll if reaches the max height\n   */\n  maxHeight: PropTypes.number,\n  /**\n   * The height of each table row, will be only used by frozen rows if `estimatedRowHeight` is set\n   */\n  rowHeight: PropTypes.number,\n  /**\n   * Estimated row height, the real height will be measure dynamically according to the content\n   */\n  estimatedRowHeight: PropTypes.number,\n  /**\n   * Get height of a row\n   */\n  getRowHeight: PropTypes.func,\n  /**\n   * The sum of heights of all rows\n   */\n  totalRowsHeight: PropTypes.number,\n  /**\n   * The height of the table header, set to 0 to hide the header, could be an array to render multi headers.\n   */\n  headerHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)]).isRequired,\n  /**\n   * The height of the table footer\n   */\n  footerHeight: PropTypes.number,\n  /**\n   * Whether the width of the columns are fixed or flexible\n   */\n  fixed: PropTypes.bool,\n  /**\n   * Whether the table is disabled\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Custom renderer on top of the table component\n   */\n  overlayRenderer: PropTypes.oneOfType([PropTypes.func, PropTypes.element]),\n  /**\n   * Custom renderer when the length of data is 0\n   */\n  emptyRenderer: PropTypes.oneOfType([PropTypes.func, PropTypes.element]),\n  /**\n   * Custom footer renderer, available only if `footerHeight` is larger then 0\n   */\n  footerRenderer: PropTypes.oneOfType([PropTypes.func, PropTypes.element]),\n  /**\n   * Custom header renderer\n   * The renderer receives props `{ cells, columns, headerIndex }`\n   */\n  headerRenderer: PropTypes.oneOfType([PropTypes.func, PropTypes.element]),\n  /**\n   * Custom row renderer\n   * The renderer receives props `{ isScrolling, cells, columns, rowData, rowIndex, depth }`\n   */\n  rowRenderer: PropTypes.oneOfType([PropTypes.func, PropTypes.element]),\n  /**\n   * Class name for the table header, could be a callback to return the class name\n   * The callback is of the shape of `({ columns, headerIndex }) => string`\n   */\n  headerClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  /**\n   * Class name for the table row, could be a callback to return the class name\n   * The callback is of the shape of `({ columns, rowData, rowIndex }) => string`\n   */\n  rowClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  /**\n   * Extra props applied to header element\n   * The handler is of the shape of `({ columns, headerIndex }) object`\n   */\n  headerProps: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  /**\n   * Extra props applied to header cell element\n   * The handler is of the shape of `({ columns, column, columnIndex, headerIndex }) => object`\n   */\n  headerCellProps: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  /**\n   * Extra props applied to row element\n   * The handler is of the shape of `({ columns, rowData, rowIndex }) => object`\n   */\n  rowProps: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  /**\n   * Extra props applied to row cell element\n   * The handler is of the shape of `({ columns, column, columnIndex, rowData, rowIndex }) => object`\n   */\n  cellProps: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  /**\n   * Extra props applied to ExpandIcon component\n   * The handler is of the shape of `({ rowData, rowIndex, depth, expandable, expanded }) => object`\n   */\n  expandIconProps: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  /**\n   * The key for the expand column which render the expand icon if the data is a tree\n   */\n  expandColumnKey: PropTypes.string,\n  /**\n   * Default expanded row keys when initialize the table\n   */\n  defaultExpandedRowKeys: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),\n  /**\n   * Controlled expanded row keys\n   */\n  expandedRowKeys: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),\n  /**\n   * A callback function when expand or collapse a tree node\n   * The handler is of the shape of `({ expanded, rowData, rowIndex, rowKey }) => *`\n   */\n  onRowExpand: PropTypes.func,\n  /**\n   * A callback function when the expanded row keys changed\n   * The handler is of the shape of `(expandedRowKeys) => *`\n   */\n  onExpandedRowsChange: PropTypes.func,\n  /**\n   * The sort state for the table, will be ignored if `sortState` is set\n   */\n  sortBy: PropTypes.shape({\n    /**\n     * Sort key\n     */\n    key: PropTypes.string,\n    /**\n     * Sort order\n     */\n    order: PropTypes.oneOf([SortOrder.ASC, SortOrder.DESC]),\n  }),\n  /**\n   * Multiple columns sort state for the table\n   *\n   * example:\n   * ```js\n   * {\n   *   'column-0': SortOrder.ASC,\n   *   'column-1': SortOrder.DESC,\n   * }\n   * ```\n   */\n  sortState: PropTypes.object,\n  /**\n   * A callback function for the header cell click event\n   * The handler is of the shape of `({ column, key, order }) => *`\n   */\n  onColumnSort: PropTypes.func,\n  /**\n   * A callback function when resizing the column width\n   * The handler is of the shape of `({ column, width }) => *`\n   */\n  onColumnResize: PropTypes.func,\n  /**\n   * A callback function when resizing the column width ends\n   * The handler is of the shape of `({ column, width }) => *`\n   */\n  onColumnResizeEnd: PropTypes.func,\n  /**\n   * Adds an additional isScrolling parameter to the row renderer.\n   * This parameter can be used to show a placeholder row while scrolling.\n   */\n  useIsScrolling: PropTypes.bool,\n  /**\n   * Number of rows to render above/below the visible bounds of the list\n   */\n  overscanRowCount: PropTypes.number,\n  /**\n   * Custom scrollbar size measurement\n   */\n  getScrollbarSize: PropTypes.func,\n  /**\n   * A callback function when scrolling the table\n   * The handler is of the shape of `({ scrollLeft, scrollTop, horizontalScrollDirection, verticalScrollDirection, scrollUpdateWasRequested }) => *`\n   *\n   * `scrollLeft` and `scrollTop` are numbers.\n   *\n   * `horizontalDirection` and `verticalDirection` are either `forward` or `backward`.\n   *\n   * `scrollUpdateWasRequested` is a boolean. This value is true if the scroll was caused by `scrollTo*`,\n   * and false if it was the result of a user interaction in the browser.\n   */\n  onScroll: PropTypes.func,\n  /**\n   * A callback function when scrolling the table within `onEndReachedThreshold` of the bottom\n   * The handler is of the shape of `({ distanceFromEnd }) => *`\n   */\n  onEndReached: PropTypes.func,\n  /**\n   * Threshold in pixels for calling `onEndReached`.\n   */\n  onEndReachedThreshold: PropTypes.number,\n  /**\n   * A callback function with information about the slice of rows that were just rendered\n   * The handler is of the shape of `({ overscanStartIndex, overscanStopIndex, startIndex， stopIndex }) => *`\n   */\n  onRowsRendered: PropTypes.func,\n  /**\n   * A callback function when the scrollbar presence state changed\n   * The handler is of the shape of `({ size, vertical, horizontal }) => *`\n   */\n  onScrollbarPresenceChange: PropTypes.func,\n  /**\n   * A object for the row event handlers\n   * Each of the keys is row event name, like `onClick`, `onDoubleClick` and etc.\n   * Each of the handlers is of the shape of `({ rowData, rowIndex, rowKey, event }) => object`\n   */\n  rowEventHandlers: PropTypes.object,\n  /**\n   * A object for the custom components, like `ExpandIcon` and `SortIndicator`\n   */\n  components: PropTypes.shape({\n    TableCell: PropTypes.func,\n    TableHeaderCell: PropTypes.func,\n    ExpandIcon: PropTypes.func,\n    SortIndicator: PropTypes.func,\n  }),\n};\n\nexport default BaseTable;\n"],"file":"BaseTable.js"}